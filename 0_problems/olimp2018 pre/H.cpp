/*
Командна олімпіада
У школі №0 столиці Рівляндії вчаться n школярів. Всі учні в цій школі обдаровані: у когось схильність до програмування, у когось схильність до математики, а у інших - до фізкультури. Таким чином, для кожного школяра відома величина ti:
ti = 1, якщо i-й школяр має схильність до програмування,
ti = 2, якщо i-й школяр має схильність до математики,
ti = 3, якщо i-й школяр має схильність до фізкультури
Так склалося, що кожен школяр має схильність рівно до одного з цих трьох предметів.
На командну олімпіаду з наукового багатоборства потрібні команди по три людини. Вчителі школи вирішили, що команди будуть складені з трьох школярів зі схильностями до різних предметів. Іншими словами, в кожній команді повинен бути один математик, один програміст і один спортсмен. Зрозуміло, кожен учень може бути членом не більше ніж однієї команди.
Яку найбільшу кількість команд школа зможе виставити на олімпіаду? Як для цього слід формувати команди?

Формат входных данных
У першому рядку записано ціле число n (1 ≤ n ≤ 5000) - кількість учнів в школі. У другому рядку записані n цілих чисел t1, t2, ..., tn (1 ≤ ti ≤ 3), де ti описує схильність i-го школяра.

Формат результата
У першому рядку виведіть ціле число w - найбільша кількість команд.
Далі виведіть w рядків по три числа в кожному рядку. Кожна така трійка чисел, це номери школярів, що утворюють команду. Як команди, так і числа в трійках можна виводити в будь-якому порядку. Школярі пронумеровані цілими числами від 1 до n в порядку їх опису у вхідних даних. Кожен школяр повинен брати участь не більше ніж в одній команді. Якщо рішень декілька, виведіть будь-яке.
Якщо ні одну команду неможливо скласти, то виведіть єдиний рядок зі значенням w рівним 0.
*/

#include <iostream>
using namespace std;

int main() {
	int n, *t, **m, mc = 0;
	cin >> n;
	t = new int[n];
	m = new int*[n];
	
	for (int i = 0; i < n; ++i) 
		cin >> t[i];

	int f3, f1, f2;
	while (true){
		f3 = f1 = f2 = -1;

		for (int i = 0; i < n; ++i)
			if (f1 == -1 && t[i] == 1)
				f1 = i;
			else if (f2 == -1 && t[i] == 2)
				f2 = i;
			else if (f3 == -1 && t[i] == 3)
				f3 = i;

		if (f3 == -1 || f1 == -1 || f2 == -1)
			break;
		
		m[mc] = new int[3]{f1, f2, f3};
		++mc;

		t[f1] = t[f2] = t[f3] = 0;
	}

	cout << mc << endl;
	for (int i = 0; i < mc; ++i)
		cout << m[i][0] + 1 << ' ' << m[i][1] + 1 << ' ' << m[i][2] + 1 << endl;


	delete[] t;
	for (int i = 0; i < mc; ++i)
		delete[] m[i];
	delete[] m;
	return 0;
}